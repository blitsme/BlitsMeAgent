<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:s="clr-namespace:System;assembly=mscorlib"
	xmlns:notification="clr-namespace:Gwupe.Agent.Components.Notification"
	xmlns:alert="clr-namespace:Gwupe.Agent.Components.Alert"
	xmlns:fileSendNotification="clr-namespace:Gwupe.Agent.Components.Functions.FileSend.Notification"
	xmlns:rdpNotification="clr-namespace:Gwupe.Agent.Components.Functions.RemoteDesktop.Notification"
	xmlns:utils="clr-namespace:Gwupe.Agent.UI.WPF.Utils" 
    xmlns:engage="clr-namespace:Gwupe.Agent.UI.WPF.Engage"
    >
    <!-- Resource dictionary entries should be defined here. -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Style.xaml" />
        <ResourceDictionary Source="Theme.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--    <utils:ImageStreamReader x:Key="avatarImageStreamReader" DefaultImageUri="pack://application:,,,/ui/wpf/Images/silhoette.png" /> -->
    <utils:RectConverter x:Key="rectConverter" />
    <utils:RelativeMessageTimeConverter x:Key="relativeMessageTimeConverter" />

    <!--
    <Style x:Key="NotificationActionButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="White" />
        <Setter Property="HorizontalAlignment" Value="Right" />

    </Style>
    <Style x:Key="DeleteButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NotificationActionButton}">
        <Setter Property="Width" Value="20" />
        <Setter Property="Command" Value="{Binding DeleteNotification}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource CancelButtonTemplate}" />
        <Setter Property="ToolTip" Value="Cancel" />
    </Style>
    <Style x:Key="CancelButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NotificationActionButton}">
        <Setter Property="Width" Value="20" />
        <Setter Property="Command" Value="{Binding Cancel}" />
        <Setter Property="ContentTemplate" Value="{DynamicResource CancelButtonTemplate}" />
        <Setter Property="ToolTip" Value="{Binding CancelTooltip}" />
    </Style>
    <Style x:Key="AcceptButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NotificationActionButton}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.AnswerTrueFalse}" />
        <Setter Property="CommandParameter">
            <Setter.Value>
                <s:Boolean>True</s:Boolean>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate" Value="{DynamicResource AcceptButtonTemplate}" />
        <Setter Property="ToolTip" Value="Accept" />
    </Style>
    -->
    <!--
    <Style x:Key="DenyButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NotificationActionButton}">
        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.AnswerTrueFalse}" />
        <Setter Property="CommandParameter">
            <Setter.Value>
                <s:Boolean>False</s:Boolean>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate" Value="{DynamicResource DenyButtonTemplate}" />
        <Setter Property="ToolTip" Value="Decline" />
    </Style>
    <Style x:Key="NotificationAcceptButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NotificationActionButton}">
        <Setter Property="Command" Value="{Binding AnswerTrueFalse}" />
        <Setter Property="CommandParameter">
            <Setter.Value>
                <s:Boolean>True</s:Boolean>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate" Value="{DynamicResource AcceptButtonTemplate}" />
        <Setter Property="ToolTip" Value="Accept" />
    </Style>
    <Style x:Key="NotificationDenyButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NotificationActionButton}">
        <Setter Property="Command" Value="{Binding AnswerTrueFalse}" />
        <Setter Property="CommandParameter">
            <Setter.Value>
                <s:Boolean>False</s:Boolean>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate" Value="{DynamicResource DenyButtonTemplate}" />
        <Setter Property="ToolTip" Value="Decline" />
    </Style>
    <Style x:Key="StopRDPButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource NotificationActionButton}">
        <Setter Property="Command" Value="{Binding AnswerDeleteStopRDP}" />
        <Setter Property="CommandParameter">
            <Setter.Value>
                <s:Boolean>False</s:Boolean>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate" Value="{DynamicResource DenyButtonTemplate}" />
        <Setter Property="ToolTip" Value="Deny" />
    </Style>
    -->
    <Style x:Key="NotificationDockStyle" TargetType="{x:Type DockPanel}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="LastChildFill" Value="true" />
        <Setter Property="Background" Value="#A9DA74" />
        <Setter Property="Margin" Value="1" />
    </Style>

    <Style x:Key="NotificationStackStyle" TargetType="{x:Type StackPanel}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Background" Value="#A9DA74" />
        <Setter Property="Margin" Value="2,3,0,0" />
        <Setter Property="Width" Value="190" />
    </Style>

    <Style x:Key="ChatBubbleMeNew" TargetType="Grid">
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="Background" Value="#C6D9F1" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <Style x:Key="MessageTextbox" TargetType="TextBox">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <!-- Template for the Sending File Progress Bar -->
    <DataTemplate DataType="{x:Type fileSendNotification:FileSendProgressNotification}">
        <Grid>
            <ProgressBar Height="18" TextBlock.FontWeight="Bold" Value="{Binding Progress, FallbackValue=0}"
			        Tag="{Binding Message, FallbackValue=Waiting}" Foreground="Black" 
                         Style="{DynamicResource MyProgressBarStyle}" FontFamily="Segoe UI" FontWeight="SemiBold"
                         FontSize="11" Margin="5,0,5,0" MaxWidth="5000"
						 />
            <Button Style="{DynamicResource CancelButtonStyle}" Margin="0,0,15,0" HorizontalAlignment="Right"/>
        </Grid>
    </DataTemplate>
    
    <!-- Template for Roster Area When receiving a Notify Add Buddy -->
    <DataTemplate DataType="{x:Type notification:AddBuddyNotification}">
        <StackPanel Orientation="Horizontal" Style="{StaticResource NotificationStackStyle}" Height="50">
                <Image Stretch="Uniform" Source="{Binding Path=Avatar, Converter={StaticResource avatarImageStreamReader}}" 
                   Width="35" Height="40" Margin="5,0,0,0"/>
            <!--            
                        <Image Stretch="Uniform" Source="/Gwupe.Agent;component/UI/WPF/Images/silhoette.png" Width="35" Height="40" Margin="5,0,0,0"/>
                -->
            <StackPanel Orientation="Vertical" Margin="5,0,0,0" Width="85" VerticalAlignment="Center">
                <TextBlock HorizontalAlignment="Left" Text="{Binding Message}" Foreground="Black" FontWeight="SemiBold" 
                           FontFamily="Segoe UI" FontSize="11" Width="85" TextWrapping="Wrap"/>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Name, FallbackValue=Unknown Notification}" 
                           Foreground="Black" FontWeight="SemiBold" FontFamily="Segoe UI" FontSize="10"
                           Width="85" TextWrapping="Wrap"/>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Location, FallbackValue=Unknown Notification}" 
                           Foreground="Black" FontFamily="Segoe UI" FontSize="10"
                           Width="85" TextWrapping="Wrap"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0,0,0" >
                <Button Style="{StaticResource AcceptButtonCommandStyle}" ToolTip="Add Buddy"/>
                <Button Style="{DynamicResource CancelButtonCommandStyle}" Margin="5,0,0,0" ToolTip="Decline Buddy" />
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!-- Template for Roster Area when receiving a join team notification -->
    <DataTemplate DataType="{x:Type notification:JoinTeamNotification}">
        <StackPanel Orientation="Horizontal" Style="{StaticResource NotificationStackStyle}" Height="50">
            <Image Stretch="Uniform" Source="{Binding Path=Avatar, Converter={StaticResource avatarImageStreamReader}}" 
                   Width="35" Height="40" Margin="5,0,0,0"/>
            <StackPanel Orientation="Vertical" Margin="5,0,0,0" Width="85" VerticalAlignment="Center">
                <TextBlock HorizontalAlignment="Left" Text="{Binding Message}" Foreground="Black" FontWeight="SemiBold" 
                           FontFamily="Segoe UI" FontSize="11" Width="85" TextWrapping="Wrap"/>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Name, FallbackValue=Unknown Notification}" 
                           Foreground="Black" FontWeight="SemiBold" FontFamily="Segoe UI" FontSize="10"
                           Width="85" TextWrapping="Wrap"/>
                <TextBlock HorizontalAlignment="Left" Text="{Binding Location, FallbackValue=Unknown Notification}" 
                           Foreground="Black" FontFamily="Segoe UI" FontSize="10"
                           Width="85" TextWrapping="Wrap"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0,0,0" >
                <Button Style="{StaticResource AcceptButtonCommandStyle}" ToolTip="Join Team"/>
                <Button Style="{DynamicResource CancelButtonCommandStyle}" Margin="5,0,0,0" ToolTip="Decline Invitation" />
            </StackPanel>
        </StackPanel>
    </DataTemplate>


    <!--
    <DataTemplate DataType="{x:Type notification:RDPDisconnectNotification}">
        <StackPanel Orientation="Horizontal" Style="{StaticResource NotificationStackStyle}" ToolTip="Terminate RDP Session">
            <Image Stretch="Uniform" Source="{Binding Path=Person, Converter={StaticResource avatarImageStreamReader}}" 
                   Width="40" Height="40" Margin="5,0,0,0"/>
            <StackPanel Orientation="Vertical" Margin="5,0,0,0" Width="85">
                <TextBlock HorizontalAlignment="Left" Text="Terminate RDP Session" Foreground="Black" FontWeight="SemiBold" 
                           FontFamily="Segoe UI" FontSize="11" Width="85" TextWrapping="Wrap"
                           VerticalAlignment="Center"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="5,0,0,0">
                <Button Style="{DynamicResource DenyButtonStyle}" Margin="5,0,0,0" Height="15" Width="15"/>
            </StackPanel>
        </StackPanel>
    </DataTemplate>
    -->
    
    <!-- Generic Yes No Buttons with Commands -->
    <DataTemplate x:Key="AnswerYesNoButtons">
        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="5,0,10,0">
            <Button Style="{DynamicResource AcceptButtonCommandStyle}" />
            <Button Style="{DynamicResource CancelButtonCommandStyle}" ToolTip="Decline" Margin="5,0,10,0"/>
        </StackPanel>
    </DataTemplate>

    <!-- Bubble request RDP Access -->
    <DataTemplate x:Key="RDPRequestNotification" DataType="{x:Type rdpNotification:RDPNotification}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="12"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <!--<Image Style="{DynamicResource ChatBubblePointMe}" Grid.Column="0"/>-->
            <Border Background="#C6D9F1" CornerRadius="5" Grid.Column="1" MinHeight="40" Height="Auto" Width="Auto" 
                    Margin="0,5,0,0" >
                <Grid Style="{DynamicResource ChatBubbleMeNew}" Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="45"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <!--<engage:UserImageOthers Grid.Column="0"/>-->

                    <TextBlock  Style="{DynamicResource MessageTimeStyle}" Grid.Column="1"
							Text="{Binding SpeakTime, Converter={StaticResource relativeMessageTimeConverter}, FallbackValue=Yesterday 8:49}"
                                VerticalAlignment="Center"/>

                    <TextBox Margin="30,10,0,0" Style="{DynamicResource MessageTextbox}" VerticalAlignment="Center"
                       Text="{Binding Path=Message, FallbackValue=A message from them}" Grid.Column="2"
                               Foreground="Gray" FontSize="12"/>

                    <ContentControl VerticalAlignment="Center" Margin="15,0,0,0" Grid.Column="3" DataContext="{Binding Path=.}">
                        <ContentControl.Style>
                            <Style TargetType="ContentControl">
                                <Setter Property="ContentTemplate" Value="{DynamicResource AnswerYesNoButtons}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Answered}" Value="True">
                                        <Setter Property="ContentTemplate" Value="{x:Null}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                </Grid>
            </Border>
        </Grid>
    </DataTemplate>
    
    <!-- Unattended RDP Request Notification, countdown to decline -->
    <DataTemplate x:Key="RDPRequestUnattendedNotification" DataType="{x:Type rdpNotification:RDPNotification}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="12"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border Background="#C6D9F1" CornerRadius="5" Grid.Column="1" MinHeight="40" Height="Auto" Width="Auto" 
                    Margin="0,5,0,0" >
                <Grid Style="{DynamicResource ChatBubbleMeNew}" Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="45"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <!--<engage:UserImageOthers Grid.Column="0"/> -->

                    <TextBlock  Style="{DynamicResource MessageTimeStyle}" Grid.Column="1"
							Text="{Binding SpeakTime, Converter={StaticResource relativeMessageTimeConverter}, FallbackValue=Yesterday 8:49}"
                                VerticalAlignment="Center"/>

                    <TextBox Margin="30,10,0,0" Style="{DynamicResource MessageTextbox}" VerticalAlignment="Center"
                       Text="{Binding Path=Message, FallbackValue=A message from them}" Grid.Column="2"
                               Foreground="Gray" FontSize="12"/>

                    <ContentControl VerticalAlignment="Center" Margin="15,0,0,0" Grid.Column="3" DataContext="{Binding Path=.}">
                        <ContentControl.Style>
                            <Style TargetType="ContentControl">
                                <Setter Property="ContentTemplate" Value="{DynamicResource AnswerYesNoButtons}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Answered}" Value="True">
                                        <Setter Property="ContentTemplate" Value="{x:Null}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                </Grid>
            </Border>
        </Grid>
    </DataTemplate>
    
    <!-- Not sure about this template -->
    <DataTemplate x:Key="RDPRequestNotificationGroup" DataType="{x:Type rdpNotification:RDPNotification}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="12"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <!--<Image Style="{DynamicResource ChatBubblePointMe}" Grid.Column="0"/>-->
            <StackPanel Orientation="Vertical"  Grid.Column="1" Margin="0,5,0,-5">
                <Border Background="#C6D9F1" CornerRadius="5" MinHeight="40" Height="Auto" Width="Auto">
                    <Grid Style="{DynamicResource ChatBubbleMeNew}" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="45"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!-- <engage:UserImageOthers Grid.Column="0"/> -->

                        <TextBlock  Style="{DynamicResource MessageTimeStyle}" Grid.Column="1"
							Text="{Binding SpeakTime, Converter={StaticResource relativeMessageTimeConverter}, FallbackValue=Yesterday 8:49}"
                                VerticalAlignment="Center"/>

                        <TextBox Margin="30,10,0,0" Style="{DynamicResource MessageTextbox}" VerticalAlignment="Center"
                       Text="{Binding Path=Message, FallbackValue=A message from them}" Grid.Column="2"
                               Foreground="Gray" FontSize="12"/>

                        <ContentControl VerticalAlignment="Center" Margin="15,0,0,0" Grid.Column="3" DataContext="{Binding Path=.}">
                            <ContentControl.Style>
                                <Style TargetType="ContentControl">
                                    <Setter Property="ContentTemplate" Value="{DynamicResource AnswerYesNoButtons}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Answered}" Value="True">
                                            <Setter Property="ContentTemplate" Value="{x:Null}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </Grid>
                </Border>
                <Image Style="{DynamicResource ChatBubbleJoinMe}" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <!-- Template to Accept/Decline an incoming file request-->
    <DataTemplate DataType="{x:Type fileSendNotification:FileSendRequestNotification}">
        <DockPanel Style="{StaticResource NotificationDockStyle}">
            <StackPanel Orientation="Horizontal" Margin="0,8,8,8" HorizontalAlignment="Right" DockPanel.Dock="Right">
                <Button Style="{DynamicResource AcceptButtonCommandStyle}" />
                <Button Style="{DynamicResource CancelButtonCommandStyle}" Margin="5,0,0,0"/>
            </StackPanel>
            <TextBlock HorizontalAlignment="Left" Margin="8,11,0,8" Text="{Binding Message, FallbackValue=Unknown Notification}" DockPanel.Dock="Left" Foreground="Black" FontWeight="Bold"/>
        </DockPanel>
    </DataTemplate>
    
    <!-- Template called to show file complete, open or whatever actions... -->
    <DataTemplate DataType="{x:Type fileSendNotification:FileReceivedNotification}">
        <DockPanel Style="{StaticResource NotificationDockStyle}">
            <StackPanel Orientation="Horizontal" Margin="0,8,8,8" HorizontalAlignment="Right" DockPanel.Dock="Right">
                <Button Style="{DynamicResource NotificationActionButton}" Content="Open File" 
                        Width="75" Command="{Binding OpenCommand}" Margin="0,0,5,0">
                    <Button.CommandParameter>File</Button.CommandParameter>
                </Button>
                <Button Content="Open Folder" Width="75" Command="{Binding OpenCommand}" 
                        Style="{DynamicResource NotificationActionButton}"  Margin="0,0,5,0">
                    <Button.CommandParameter>Folder</Button.CommandParameter>
                </Button>
                <Button Style="{DynamicResource CancelButtonCommandStyle}" Margin="0,0,5,0"/>
            </StackPanel>
            <TextBlock HorizontalAlignment="Left" Margin="8,11,0,8" Text="{Binding Message, FallbackValue=Unknown Notification}" DockPanel.Dock="Left" Foreground="Black" FontWeight="Bold"/>
        </DockPanel>
    </DataTemplate>
    
    <!-- Generic Notification with a Cancel Button -->
    <DataTemplate DataType="{x:Type notification:CancellableNotification}">
        <DockPanel Style="{StaticResource NotificationDockStyle}">
            <StackPanel Orientation="Horizontal" Margin="0,8,8,8" HorizontalAlignment="Right" DockPanel.Dock="Right">
                <Button Style="{StaticResource CancelButtonCommandStyle}" />
            </StackPanel>
            <TextBlock HorizontalAlignment="Left" Margin="8,11,0,8" Text="{Binding Message, FallbackValue=Unknown Notification}" DockPanel.Dock="Left" Foreground="Black" FontWeight="Bold"/>
        </DockPanel>
    </DataTemplate>
    
    <!-- Template for a Info Notification with Close Button -->
    <DataTemplate DataType="{x:Type notification:InfoNotification}">
        <DockPanel HorizontalAlignment="Stretch" LastChildFill="true" Background="#FF1AAD45">
            <StackPanel Orientation="Horizontal" Margin="0,8,8,8" HorizontalAlignment="Right" DockPanel.Dock="Right">
                <Button Style="{DynamicResource CancelButtonCommandStyle}" />
            </StackPanel>
            <TextBlock HorizontalAlignment="Left" Margin="8,11,0,8" Text="{Binding Message, FallbackValue=Unknown Notification}" DockPanel.Dock="Left" Foreground="White" FontWeight="Bold"/>
        </DockPanel>
    </DataTemplate>
    
    <!-- Template for an Alert, with a build in Left Click command for binding -->
    <DataTemplate DataType="{x:Type alert:Alert}">
        <DockPanel HorizontalAlignment="Stretch" LastChildFill="true" Background="#4A7EBB" Margin="0,0,0,0">
            <TextBlock HorizontalAlignment="Stretch" Margin="3" Text="{Binding Message, FallbackValue=Unknown Alert}" Foreground="White" FontWeight="Bold" Background="#4A7EBB" TextAlignment="Center" DockPanel.Dock="Left">
				<TextBlock.InputBindings>
					<MouseBinding Command="{Binding Command}" MouseAction="LeftClick" />
				</TextBlock.InputBindings>
			</TextBlock>
        </DockPanel>
    </DataTemplate>
    <!-- for a nice progress bar -->
    <LinearGradientBrush x:Key="ProgressBarBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#CFCFCF" Offset="0"/>
        <GradientStop Color="#CFCFCF" Offset="0.5"/>
        <GradientStop Color="#CFCFCF" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#999999" Offset="0"/>
        <GradientStop Color="#999999" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
        <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarTopHighlight" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#80FFFFFF" Offset="0.05"/>
        <GradientStop Color="#00FFFFFF" Offset="0.25"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#A9DA74" Offset="0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#0C000000" Offset="0"/>
        <GradientStop Color="#20000000" Offset="0.3"/>
        <GradientStop Color="#00000000" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#00000000" Offset="0"/>
        <GradientStop Color="#20000000" Offset="0.7"/>
        <GradientStop Color="#0C000000" Offset="1"/>
    </LinearGradientBrush>
    <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,0.5,0.5">
        <GradientStop Color="#A9DA74" Offset="0"/>
        <GradientStop Color="#A9DA74" Offset="1"/>
    </RadialGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect" EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="#A9DA74" Offset="0"/>
        <GradientStop Color="#A9DA74" Offset="1"/>
    </LinearGradientBrush>
    <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,-0.5,0.5">
        <GradientStop Color="#A9DA74" Offset="0"/>
        <GradientStop Color="#A9DA74" Offset="1"/>
    </RadialGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#A9DA74" Offset="0.5385"/>
        <GradientStop Color="#A9DA74" Offset="0.5385"/>
    </LinearGradientBrush>
    <Style x:Key="MyProgressBarStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="#01D328"/>
        <Setter Property="Background" Value="{StaticResource ProgressBarBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="true">
                        <TextBlock Text="{TemplateBinding Tag}" Panel.ZIndex="2" Foreground="Black" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15,0,0,0"/>
                        <TextBlock Text="{TemplateBinding Tag}" Panel.ZIndex="3" Foreground="Black" Width="{Binding ActualWidth, ElementName=rectangle}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15,0,0,0">
                            <TextBlock.Clip>
                                <RectangleGeometry>
                                    <RectangleGeometry.Rect>
                                        <MultiBinding Converter="{StaticResource rectConverter}">
                                            <Binding ElementName="Indicator" Path="ActualWidth"/>
                                            <Binding ElementName="Indicator" Path="ActualHeight"/>
                                        </MultiBinding>
                                    </RectangleGeometry.Rect>
                                </RectangleGeometry>
                            </TextBlock.Clip>
                        </TextBlock>
                        <Rectangle x:Name="rectangle" Fill="{TemplateBinding Background}" RadiusY="2" RadiusX="2"/>
                        <Border Background="{StaticResource ProgressBarGlassyHighlight}" Margin="1"/>
                        <Border BorderBrush="#80FFFFFF" BorderThickness="1,0,1,1" Background="{StaticResource ProgressBarTopHighlight}" Margin="1"/>
                        <Rectangle x:Name="PART_Track" Margin="1"/>
                        <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
                            <Grid x:Name="Foreground">
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                                <Grid x:Name="Animation" ClipToBounds="true">
                                    <Rectangle x:Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100"/>
                                </Grid>
                                <Grid x:Name="Overlay">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="15"/>
                                        <ColumnDefinition Width="0.1*"/>
                                        <ColumnDefinition MaxWidth="15"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Rectangle x:Name="LeftDark" Fill="{StaticResource ProgressBarIndicatorDarkEdgeLeft}" Margin="1,1,0,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                    <Rectangle x:Name="RightDark" Grid.Column="2" Fill="{StaticResource ProgressBarIndicatorDarkEdgeRight}" Margin="0,1,1,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                    <Rectangle x:Name="LeftLight" Grid.Column="0" Fill="{StaticResource ProgressBarIndicatorLightingEffectLeft}" Grid.Row="2"/>
                                    <Rectangle x:Name="CenterLight" Grid.Column="1" Fill="{StaticResource ProgressBarIndicatorLightingEffect}" Grid.Row="2"/>
                                    <Rectangle x:Name="RightLight" Grid.Column="2" Fill="{StaticResource ProgressBarIndicatorLightingEffectRight}" Grid.Row="2"/>
                                    <Border x:Name="Highlight1" Background="{StaticResource ProgressBarIndicatorGlassyHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                    <Border x:Name="Highlight2" Background="{StaticResource ProgressBarTopHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                </Grid>
                            </Grid>
                        </Decorator>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="LeftDark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="RightDark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="LeftLight" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="CenterLight" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="RightLight" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="false">
                            <Setter Property="Background" TargetName="Animation" Value="#A9DA74"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--
    <DataTemplate x:Key="CancelButtonTemplate">
        <Image Source="/Gwupe.Agent;component/UI/WPF/Images/close.png"/>
    </DataTemplate>
    <DataTemplate x:Key="AcceptButtonTemplate">
        <Image Source="/Gwupe.Agent;component/UI/WPF/Images/Check.png" Width="13"/>
    </DataTemplate>
    <DataTemplate x:Key="DenyButtonTemplate">
        <Image Source="/Gwupe.Agent;component/UI/WPF/Images/close.png"/>
    </DataTemplate>
    -->
</ResourceDictionary>